<!DOCTYPE html>
<html lang="en">

	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, shrink-to-fit=9">
		<meta name="description" content="Gambolthemes">
		<meta name="author" content="Gambolthemes">		
		<title>Fairway Supermarket</title>
		
		<!-- Favicon Icon -->
		<link rel="icon" type="image/png" href="images/fav.png">
		
		<!-- Stylesheets -->
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
		<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
		<link  href="/user/css/orders.css"  rel="stylesheet">
		<link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
		<link href='/user/vendor/unicons-2.0.1/css/unicons.css' rel='stylesheet'>
		<link href="/user/css/style.css" rel="stylesheet">
		<link href="/user/css/responsive.css" rel="stylesheet">
		<link href="/user/css/night-mode.css" rel="stylesheet">
		<link href="/user/css/customstyle.css" rel="stylesheet">
		<link  href="/user/css/signupmodals.css"  rel="stylesheet">
        <link  href="/user/css/editProfileModal.css"  rel="stylesheet">
		
		<!-- Vendor Stylesheets -->
		<link href="/user/vendor/fontawesome-free/css/all.min.css" rel="stylesheet">
		<link href="/user/vendor/OwlCarousel/assets/owl.carousel.css" rel="stylesheet">
		<link href="/user/vendor/OwlCarousel/assets/owl.theme.default.min.css" rel="stylesheet">
		<link href="/user/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
		<link href="/user/vendor/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet">	
        
		
		
	</head>


	<body>
		
		
	<!-- Add Address Model End-->
		<%- include('../partials/user/header', { parentCategories: parentCategories }) %>
		<%- include('../partials/user/viewOrderDetailsModal') %>
        <%- include('../partials/user/cancelModel') %>
        <%- include('../partials/user/returnModel') %>
		<!-- Add this modal for cancel items -->
<!-- Cancel Order Modal -->

		<!-- Header End -->
	
		<!-- Body Start -->
        <%- include('../partials/user/dashboardOverview') %>
		<div class="col-xl-9 col-lg-8 col-md-12">
            <div class="dashboard-right">
                <div class="row">
                    <div class="col-md-12">
                        <div class="main-title-tab">
                            <h4><i class="uil uil-location-point"></i>My Orders</h4>
                        </div>
                    </div>
                    <div class="col-lg-12 col-md-12">
                        <div class="pdpt-bg">
                            <div class="col-md-12">
                                <div class="order-list-container">
                                    <% if(orders && orders.length > 0) { %>
                                        <% orders.forEach(order => { %>
                                           
                                        <% }); %>
                                    <% } else { %>
                                        <div class="no-orders">
                                            <div class="no-orders-content">
                                                <i class="uil uil-box"></i>
                                                <h3>No Orders Yet</h3>
                                                <p>Looks like you haven't made your first order yet.</p>
                                                <a href="/" class="start-shopping-btn">Start Shopping</a>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
     
        
        <%- include('../partials/user/resetResetModal') %>

        


	<!-- Javascripts -->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
	<script src="/user/js/jquery.min.js"></script>
	<script src="/user/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
	<script src="/user/vendor/bootstrap-select/js/bootstrap-select.min.js"></script>	
	<script src="/user/vendor/OwlCarousel/owl.carousel.js"></script>
	<script src="/user/js/jquery.countdown.min.js"></script>
	<script src="/user/js/custom.js"></script>
	<script src="/user/js/offset_overlay.js"></script>
	<script src="/user/js/night-mode.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script src="/user/js/editReset.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
	<script >
		async function viewOrderDetails(orderId) {
    try {
        const response = await fetch(`/orders/${orderId}`);
        const data = await response.json();

        if (data.success) {
            // Get the modal content container
            const modalContent = document.getElementById('orderDetailsContent');
            const order = data.order;

            // Update the modal content with order details
            modalContent.innerHTML = `
                <div class="order-detail-content">
                    <!-- Order Information Section -->
                    <div class="detail-section">
                        <h6>Order Information</h6>
                        <div class="detail-info">
                            <p><strong>Order ID:</strong> #${order._id.toString().slice(-6)}</p>
                            <p><strong>Date:</strong> ${new Date(order.createdAt).toLocaleString()}</p>
                            <p><strong>Status:</strong> <span class="status ${order.orderStatus.toLowerCase()}">${order.orderStatus}</span></p>
                            <p><strong>Payment Method:</strong> ${order.paymentMethod === 'cod' ? 'Cash on Delivery' : 'Online Payment'}</p>
                        </div>
                    </div>

                    <!-- Delivery Address Section -->
                    <div class="detail-section">
                        <h6>Delivery Address</h6>
                        <div class="detail-info">
                            <p><strong>${order.deliveryAddress.name}</strong></p>
                            <p>${order.deliveryAddress.mobile}</p>
                            <p>${order.deliveryAddress.flat}, ${order.deliveryAddress.addressLine}</p>
                            <p>${order.deliveryAddress.city}, ${order.deliveryAddress.state} - ${order.deliveryAddress.pincode}</p>
                        </div>
                    </div>

                    <!-- Order Items Section -->
                     <div class="detail-section">
    <h6>Order Items</h6>
    <div class="detail-items">
        ${order.items.map(item => `
            <div class="order-item ${item.cancelled ? 'cancelled' : ''}">
                <div class="item-image">
                    <img src="${item.product.images[0]}" alt="${item.product.name}">
                </div>
                <div class="item-details">
                    <div class="item-header">
                        <h6>${item.product.name}</h6>
                        ${item.cancelled ? '<span class="cancelled-badge">Cancelled</span>' : ''}
                    </div>
                    <span>${item.product.quantity} ${item.product.unit}</span>
                    <div class="item-price">
                        ${item.quantity} × 
                        ${item.product.discountPrice ? `
                            <span class="original-price">₹${item.product.price}</span>
                            <span class="discount-price">₹${item.product.discountPrice}</span>
                        ` : `
                            ₹${item.product.price}
                        `}
                    </div>
                    ${item.cancelReason ? `
                        <div class="cancel-reason">
                            <i class="fas fa-info-circle"></i>
                            Cancellation Reason: ${item.cancelReason}
                        </div>
                    ` : ''}
                </div>
                <div class="item-total ${item.cancelled ? 'cancelled' : ''}">
                    ₹${((item.product.discountPrice || item.product.price) * item.quantity).toFixed(2)}
                </div>
            </div>
  
                            `).join('')}
                        </div>
                    </div>

                    <!-- Price Details Section -->
                    <div class="detail-section">
                        <h6>Price Details</h6>
                        <div class="price-breakdown">
                            <div class="price-row">
                                <span>Subtotal</span>
                                <span>₹${order.total.toFixed(2)}</span>
                            </div>
                            ${order.total - order.discountTotal > 0 ? `
                                <div class="price-row discount">
                                    <span>Discount</span>
                                    <span>-₹${(order.total - order.discountTotal).toFixed(2)}</span>
                                </div>
                            ` : ''}
                            <div class="price-row">
                                <span>Delivery</span>
                                <span class="free">FREE</span>
                            </div>
                            <div class="price-row total">
                                <span>Total Amount</span>
                                <span>₹${order.discountTotal.toFixed(2)}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Show the modal
            const orderModal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
            orderModal.show();
        } else {
            throw new Error(data.message || 'Failed to load order details');
        }
    } catch (error) {
        console.error('View order details error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load order details'
        });
    }
}
let selectedItemsForCancel = new Set();

function showCancelModal(orderId, type) {
    const modal = document.getElementById('cancelOrderModal');
    const itemsSection = modal.querySelector('.cancel-items-section');
    
    document.getElementById('cancelOrderId').value = orderId;
    document.getElementById('cancelType').value = type;
    
    if (type === 'partial') {
        // Fetch order details and populate items
        fetchOrderItems(orderId).then(items => {
            const itemsList = modal.querySelector('.cancel-items-list');
            itemsList.innerHTML = items.map(item => `
                <div class="cancel-item">
        <div class="item-selection">
            <input class="custom-checkbox" type="checkbox" 
                   value="${item._id}" 
                   id="item_${item._id}"
                   onchange="toggleCancelItem('${item._id}')">
            <label class="checkbox-label" for="item_${item._id}">
                <span class="checkmark"></span>
            </label>
        </div>
        <div class="item-content">
            <div class="item-image">
                <img src="${item.product.images[0]}" alt="${item.product.name}">
                ${item.quantity > 1 ? `<span class="item-quantity">×${item.quantity}</span>` : ''}
            </div>
            <div class="item-details">
                <h6 class="item-name">${item.product.name}</h6>
                <div class="item-meta">
                    <p class="item-unit">${item.product.quantity} ${item.product.unit}</p>
                    <div class="item-price">
                        ${item.product.discountPrice ? `
                            <span class="current-price">₹${item.product.discountPrice}</span>
                            <span class="original-price">₹${item.product.price}</span>
                        ` : `
                            <span class="current-price">₹${item.product.price}</span>
                        `}
                    </div>
                </div>
                <div class="item-total">
                    <span class="total-label">Total:</span>
                    <span class="total-amount">₹${((item.product.discountPrice || item.product.price) * item.quantity).toFixed(2)}</span>
                </div>
            </div>
        </div>
    </div>
            `).join('');
        });
        itemsSection.style.display = 'block';
    } else {
        itemsSection.style.display = 'none';
    }
    
    selectedItemsForCancel.clear();
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

async function fetchOrderItems(orderId) {
    try {
        const response = await fetch(`/orders/${orderId}`);
        const data = await response.json();
        return data.success ? data.order.items : [];
    } catch (error) {
        console.error('Fetch order items error:', error);
        showErrorNotification('Failed to load order items');
        return [];
    }
}

function toggleCancelItem(itemId) {
    if (selectedItemsForCancel.has(itemId)) {
        selectedItemsForCancel.delete(itemId);
    } else {
        selectedItemsForCancel.add(itemId);
    }
}

async function processCancellation() {
    const orderId = document.getElementById('cancelOrderId').value;
    const cancelType = document.getElementById('cancelType').value;
    const reasonSelect = document.getElementById('cancelReason');
    const otherReasonText = document.getElementById('otherReason');
    
    if (!reasonSelect.value) {
        showErrorNotification('Please select a reason for cancellation');
        return;
    }

    if (cancelType === 'partial' && selectedItemsForCancel.size === 0) {
        showErrorNotification('Please select items to cancel');
        return;
    }

    try {
        const response = await fetch('/orders/cancel', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId,
                cancelType,
                items: Array.from(selectedItemsForCancel),
                reason: reasonSelect.value === 'Other' ? otherReasonText.value : reasonSelect.value
            })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Order Cancelled',
                text: cancelType === 'full' ? 'Order has been cancelled successfully' : 'Selected items have been cancelled',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showErrorNotification(error.message || 'Failed to cancel order');
    }
}

// Event listener for reason select
document.getElementById('cancelReason').addEventListener('change', function() {
    const otherReasonGroup = document.getElementById('otherReasonGroup');
    otherReasonGroup.style.display = this.value === 'Other' ? 'block' : 'none';
});

let selectedItemsForReturn = new Set();

function showReturnModal(orderId, type) {
    const modal = document.getElementById('returnOrderModal');
    const itemsSection = modal.querySelector('.return-items-section');
    
    document.getElementById('returnOrderId').value = orderId;
    document.getElementById('returnType').value = type;
    
    if (type === 'partial') {
        // Fetch order details and populate returnable items
        fetchOrderItems(orderId).then(items => {
            const itemsList = modal.querySelector('.return-items-list');
            itemsList.innerHTML = items
                .filter(item => !item.cancelled && !item.returned) // Only show eligible items
                .map(item => `
                    <div class="return-item">
                        <div class="item-selection">
                            <input class="custom-checkbox" type="checkbox" 
                                   value="${item._id}" 
                                   id="return_item_${item._id}"
                                   onchange="toggleReturnItem('${item._id}')">
                            <label class="checkbox-label" for="return_item_${item._id}">
                                <span class="checkmark"></span>
                            </label>
                        </div>
                        <div class="item-content">
                            <div class="item-image">
                                <img src="${item.product.images[0]}" alt="${item.product.name}">
                                ${item.quantity > 1 ? `<span class="item-quantity">×${item.quantity}</span>` : ''}
                            </div>
                            <div class="item-details">
                                <h6 class="item-name">${item.product.name}</h6>
                                <div class="item-meta">
                                    <p class="item-unit">${item.product.quantity} ${item.product.unit}</p>
                                    <div class="item-price">
                                        ${item.product.discountPrice ? `
                                            <span class="current-price">₹${item.product.discountPrice}</span>
                                            <span class="original-price">₹${item.product.price}</span>
                                        ` : `
                                            <span class="current-price">₹${item.product.price}</span>
                                        `}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `).join('');
        });
        itemsSection.style.display = 'block';
    } else {
        itemsSection.style.display = 'none';
    }
    
    selectedItemsForReturn.clear();
    const bsModal = new bootstrap.Modal(modal);
    bsModal.show();
}

function toggleReturnItem(itemId) {
    if (selectedItemsForReturn.has(itemId)) {
        selectedItemsForReturn.delete(itemId);
    } else {
        selectedItemsForReturn.add(itemId);
    }
}

async function processReturn() {
    const orderId = document.getElementById('returnOrderId').value;
    const returnType = document.getElementById('returnType').value;
    const reasonSelect = document.getElementById('returnReason');
    const otherReasonText = document.getElementById('otherReturnReason');
    const description = document.getElementById('returnDescription').value;
    
    if (!reasonSelect.value) {
        showErrorNotification('Please select a reason for return');
        return;
    }

    if (returnType === 'partial' && selectedItemsForReturn.size === 0) {
        showErrorNotification('Please select items to return');
        return;
    }

    try {
        const response = await fetch('/orders/return', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                orderId,
                returnType,
                items: Array.from(selectedItemsForReturn),
                reason: reasonSelect.value === 'Other' ? otherReasonText.value : reasonSelect.value,
                description
            })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Return Request Submitted',
                text: 'Your return request has been submitted successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showErrorNotification(error.message || 'Failed to submit return request');
    }
}

// Event listener for return reason select
document.getElementById('returnReason').addEventListener('change', function() {
    const otherReasonGroup = document.getElementById('otherReturnReasonGroup');
    otherReasonGroup.style.display = this.value === 'Other' ? 'block' : 'none';
});
	</script>

</body>
</html>