<!DOCTYPE html>
<html lang="en">

	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, shrink-to-fit=9">
		<meta name="description" content="Gambolthemes">
		<meta name="author" content="Gambolthemes">		
		<title>Fairway Supermarket</title>
		
		<!-- Favicon Icon -->
		<link rel="icon" type="image/png" href="images/fav.png">
		
		<!-- Stylesheets -->
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
		<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
		<link  href="/user/css/address.css"  rel="stylesheet">
		<link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
		<link href='/user/vendor/unicons-2.0.1/css/unicons.css' rel='stylesheet'>
		<link href="/user/css/style.css" rel="stylesheet">
		<link href="/user/css/responsive.css" rel="stylesheet">
		<link href="/user/css/night-mode.css" rel="stylesheet">
		<link href="/user/css/customstyle.css" rel="stylesheet">
		<link  href="/user/css/signupmodals.css"  rel="stylesheet">
        <link  href="/user/css/editProfileModal.css"  rel="stylesheet">
		
		<!-- Vendor Stylesheets -->
		<link href="/user/vendor/fontawesome-free/css/all.min.css" rel="stylesheet">
		<link href="/user/vendor/OwlCarousel/assets/owl.carousel.css" rel="stylesheet">
		<link href="/user/vendor/OwlCarousel/assets/owl.theme.default.min.css" rel="stylesheet">
		<link href="/user/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
		<link href="/user/vendor/bootstrap-select/css/bootstrap-select.min.css" rel="stylesheet">	
        
		
		
	</head>


	<body><!-- Add Address Model -->
		<div id="address_model" class="header-cate-model main-gambo-model modal fade" tabindex="-1" role="dialog">
			<div class="modal-dialog modal-dialog-centered modal-lg" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title">Add New Address</h5>
						<button type="button" class="close-model-btn" data-bs-dismiss="modal" aria-label="Close">
							<i class="uil uil-multiply"></i>
						</button>
					</div>
					<div class="modal-body">
						<form id="addressForm" novalidate>
							<input type="hidden" id="addressId">
							<!-- Address Type Radio Buttons -->
							<div class="address-type-selection mb-4">
								<div class="address-type-group">
									<div class="row">
										<div class="col-lg-12">
											<label class="control-label mb-2">Address Type*</label>
											<div class="address-types">
												<div class="type-item">
													<input type="radio" id="ad1" name="addressType" value="Home" checked>
													<label for="ad1"><i class="uil uil-home"></i>Home</label>
												</div>
												<div class="type-item">
													<input type="radio" id="ad2" name="addressType" value="Office">
													<label for="ad2"><i class="uil uil-building"></i>Office</label>
												</div>
												<div class="type-item">
													<input type="radio" id="ad3" name="addressType" value="Other">
													<label for="ad3"><i class="uil uil-map-marker"></i>Other</label>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
		
							<div class="row">
								<div class="row">
									<!-- Name and Mobile -->
									<div class="col-lg-6 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">Full Name*</label>
											<input type="text" class="form-control" id="name" name="name" required>
											<div class="invalid-feedback" id="nameError">Name is required</div>
										</div>
									</div>
									<div class="col-lg-6 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">Mobile Number*</label>
											<input type="tel" class="form-control" id="mobile" name="mobile" required>
											<div class="invalid-feedback" id="mobileError">Enter valid mobile number</div>
										</div>
									</div>

									<!-- House/Flat Number -->
									<div class="col-lg-12 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">Flat / House / Office No.*</label>
											<input id="flat" name="flat" type="text" placeholder="Address" class="form-control" required>
											<div class="invalid-feedback" id="flatError">House/Flat number is required</div>
										</div>
									</div>

									<!-- Street Address -->
									<div class="col-lg-12 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">Street / Society / Office Name*</label>
											<input id="addressLine" name="addressLine" type="text" class="form-control" required>
											<div class="invalid-feedback" id="addressLineError">Street address is required</div>
										</div>
									</div>

									<!-- City and State -->
									<div class="col-lg-6 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">City*</label>
											<input type="text" class="form-control" id="city" name="city" required>
											<div class="invalid-feedback" id="cityError">City is required</div>
										</div>
									</div>
									<div class="col-lg-6 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">State*</label>
											<select class="form-control" id="state" name="state" required>
												<option value="">Select State</option>
												<option value="Kerala">Kerala</option>
											</select>
											<div class="invalid-feedback" id="stateError">State is required</div>
										</div>
									</div>

									<!-- Pincode -->
									<div class="col-lg-6 col-md-12">
										<div class="form-group mt-4">
											<label class="control-label">Pincode*</label>
											<input id="pincode" name="pincode" type="text" class="form-control" required>
											<div class="invalid-feedback" id="pincodeError">Enter valid pincode</div>
										</div>
									</div>

									<!-- Default Address Checkbox -->
									<div class="col-lg-12 col-md-12">
										<div class="form-group mt-4">
											<div class="form-check">
												<input class="form-check-input" type="checkbox" id="isDefault" name="isDefault">
												<label class="form-check-label">Make this my default address</label>
											</div>
										</div>
									</div>

									<!-- Save Button -->
									<div class="col-lg-12 col-md-12">
										<div class="form-group mt-4">
											<button type="button" class="save-btn14 hover-btn w-100" onclick="saveAddress()">
												Save Address
											</button>
										</div>
									</div>
								</div>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
		
	<!-- Add Address Model End-->
		<%- include('../partials/user/header', { parentCategories: parentCategories }) %>
		

		
		<!-- Header End -->
	
		<!-- Body Start -->
        <%- include('../partials/user/dashboardOverview') %>
		<div class="col-xl-9 col-lg-8 col-md-12">
			<div class="dashboard-right">
				<div class="row">
					<div class="col-md-12">
						<div class="main-title-tab">
							<h4><i class="uil uil-location-point"></i>My Address</h4>
						</div>
					</div>
					<div class="col-lg-12 col-md-12">
						<div class="pdpt-bg">
							<div class="pdpt-title">
								<h4>My Address</h4>
							</div>
							<div class="address-body">
								<a href="#" class="add-address hover-btn" data-bs-toggle="modal" data-bs-target="#address_model">Add New Address</a>
								<% if(addresses && addresses.length > 0) { %>
									<% addresses.forEach(address => { %>
									<div class="address-item">
										<div class="address-icon1">
											<i class="uil uil-map-marker"></i>
										</div>
										<div class="address-dt-all">
											<div class="address-header">
												<h4>
													<%= address.name %>
													<span class="address-type-badge <%= address.addressType.toLowerCase() %>">
														<%= address.addressType %>
													</span>
													<% if(address.isDefault) { %>
														<span class="default-badge">Default</span>
													<% } %>
												</h4>
											</div>
											<div class="address-details">
												<p class="contact-info">
													<i class="uil uil-phone-alt"></i> <%= address.mobile %>
												</p>
												<p class="address-text">
													<%= address.flat %>,
													<%= address.addressLine %>,<br>
													<%= address.city %>,
													<%= address.state %> - <%= address.pincode %>
												</p>
											</div>
											<div class="address-actions">
												<ul class="action-btns">
													<button class="edit-btn" onclick="editAddress('<%= address._id %>')">
														<i class="uil uil-edit"></i>
														Edit
													</button>
													<button class="delete-btn" onclick="deleteAddress('<%= address._id %>')">
														<i class="uil uil-trash-alt"></i>
														Delete
													</button>
													<% if(!address.isDefault) { %>
														<button class="default-btn" onclick="setDefaultAddress('<%= address._id %>')">
															<i class="uil uil-check"></i>
															Set as Default
														</button>
													<% } %>
												</ul>
											</div>
										</div>
									</div>
									<% }); %>
								<% } else { %>
									<div class="no-address">
										<div class="icon">
											<i class="uil uil-map-marker"></i>
										</div>
										<p>No addresses found. Add a new address to get started.</p>
									</div>
								<% } %>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
     
        
        <%- include('../partials/user/resetResetModal') %>

        


	<!-- Javascripts -->
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
	<script src="/user/js/jquery.min.js"></script>
	<script src="/user/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
	<script src="/user/vendor/bootstrap-select/js/bootstrap-select.min.js"></script>	
	<script src="/user/vendor/OwlCarousel/owl.carousel.js"></script>
	<script src="/user/js/jquery.countdown.min.js"></script>
	<script src="/user/js/custom.js"></script>
	<script src="/user/js/offset_overlay.js"></script>
	<script src="/user/js/night-mode.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script src="/user/js/editReset.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
	
	<script>

document.addEventListener('DOMContentLoaded', function() {
    // Mobile number validation
    document.getElementById('mobile').addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');
        if (value.length > 10) value = value.slice(0, 10);
        e.target.value = value;
        
        if (value.length === 10) {
            this.classList.remove('is-invalid');
        }
    });

    // Pincode validation
    document.getElementById('pincode').addEventListener('input', function(e) {
        let value = e.target.value.replace(/\D/g, '');
        if (value.length > 6) value = value.slice(0, 6);
        e.target.value = value;
        
        if (value.length === 6) {
            this.classList.remove('is-invalid');
        }
    });

    // Clear form on modal close
    document.getElementById('address_model').addEventListener('hidden.bs.modal', function() {
        document.getElementById('addressForm').reset();
        document.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
        const modalTitle = document.querySelector('#address_model .modal-title');
        if (modalTitle) {
            modalTitle.textContent = 'Add New Address';
        }
    });
});

function validateAddressForm() {
    const form = document.getElementById('addressForm');
    let isValid = true;

    // Reset previous validations
    form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));

    // Name validation
    const name = document.getElementById('name');
    if (!name.value.trim()) {
        name.classList.add('is-invalid');
        document.getElementById('nameError').textContent = 'Name is required';
        isValid = false;
    }

    // Mobile validation
    const mobile = document.getElementById('mobile');
    if (!mobile.value.trim()) {
        mobile.classList.add('is-invalid');
        document.getElementById('mobileError').textContent = 'Mobile number is required';
        isValid = false;
    } else if (!/^[0-9]{10}$/.test(mobile.value.trim())) {
        mobile.classList.add('is-invalid');
        document.getElementById('mobileError').textContent = 'Enter valid 10-digit mobile number';
        isValid = false;
    }

    // Flat/House validation
    const flat = document.getElementById('flat');
    if (!flat.value.trim()) {
        flat.classList.add('is-invalid');
        document.getElementById('flatError').textContent = 'House/Flat number is required';
        isValid = false;
    }

    // Address line validation
    const addressLine = document.getElementById('addressLine');
    if (!addressLine.value.trim()) {
        addressLine.classList.add('is-invalid');
        document.getElementById('addressLineError').textContent = 'Street address is required';
        isValid = false;
    }

    // City validation
    const city = document.getElementById('city');
    if (!city.value.trim()) {
        city.classList.add('is-invalid');
        document.getElementById('cityError').textContent = 'City is required';
        isValid = false;
    }

    // State validation
    const state = document.getElementById('state');
    if (!state.value) {
        state.classList.add('is-invalid');
        document.getElementById('stateError').textContent = 'State is required';
        isValid = false;
    }

    // Pincode validation
    const pincode = document.getElementById('pincode');
    if (!pincode.value.trim()) {
        pincode.classList.add('is-invalid');
        document.getElementById('pincodeError').textContent = 'Pincode is required';
        isValid = false;
    } else if (!/^[0-9]{6}$/.test(pincode.value.trim())) {
        pincode.classList.add('is-invalid');
        document.getElementById('pincodeError').textContent = 'Enter valid 6-digit pincode';
        isValid = false;
    }

    return isValid;
}

async function saveAddress() {
    try {
        if (!validateAddressForm()) {
            return;
        }

        const addressId = document.getElementById('addressId').value;
        const formData = {
            addressType: document.querySelector('input[name="addressType"]:checked').value,
            name: document.getElementById('name').value.trim(),
            mobile: document.getElementById('mobile').value.trim(),
            flat: document.getElementById('flat').value.trim(),
            addressLine: document.getElementById('addressLine').value.trim(),
            city: document.getElementById('city').value.trim(),
            state: document.getElementById('state').value,
            pincode: document.getElementById('pincode').value.trim(),
            isDefault: document.getElementById('isDefault').checked
        };

        const url = addressId ? `/dashboard/address/${addressId}` : '/dashboard/address';
        const method = addressId ? 'PUT' : 'POST';

        const response = await fetch(url, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: addressId ? 'Address updated successfully' : 'Address added successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message || 'Failed to save address');
        }
    } catch (error) {
        console.error('Save address error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong. Please try again.'
        });
    }
}

async function editAddress(addressId) {
    try {
        const response = await fetch(`/dashboard/address/${addressId}`);
        const data = await response.json();

        if (data.success) {
            const address = data.address;
            
            // Set address type radio button
            const radioButton = document.querySelector(`input[name="addressType"][value="${address.addressType}"]`);
            if (radioButton) {
                radioButton.checked = true;
            }

            // Set form values
            document.getElementById('addressId').value = address._id;
            document.getElementById('name').value = address.name;
            document.getElementById('mobile').value = address.mobile;
            document.getElementById('flat').value = address.flat;
            document.getElementById('addressLine').value = address.addressLine;
            document.getElementById('city').value = address.city;
            document.getElementById('state').value = address.state;
            document.getElementById('pincode').value = address.pincode;
            document.getElementById('isDefault').checked = address.isDefault;

            // Change modal title
            const modalTitle = document.querySelector('#address_model .modal-title');
            if (modalTitle) {
                modalTitle.textContent = 'Edit Address';
            }

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('address_model'));
            modal.show();
        } else {
            throw new Error(data.message || 'Failed to load address');
        }
    } catch (error) {
        console.error('Edit address error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load address details'
        });
    }
}
async function deleteAddress(addressId) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You want to delete this address?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, delete it!'
        });

        if (result.isConfirmed) {
            const response = await fetch(`/dashboard/address/${addressId}`, {
                method: 'DELETE'
            });

            const data = await response.json();

            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Deleted!',
                    text: 'Address has been deleted.',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to delete address');
            }
        }
    } catch (error) {
        console.error('Delete address error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to delete address'
        });
    }
}
async function setDefaultAddress(addressId) {
    try {
        const response = await fetch(`/dashboard/address/${addressId}/default`, {
            method: 'PUT'
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Default address updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message || 'Failed to set default address');
        }
    } catch (error) {
        console.error('Set default address error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to set default address'
        });
    }
}
		
	</script>
</body>
</html>