<style>
    #otpFields {
    width: 100%;
    position: absolute;
    background: white;
    height: 100%;
    z-index: 1;
}
</style>

<div class="auth-modal modal" id="loginModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered auth-dialog">
        <div class="modal-content auth-content">
            <div class="modal-body p-0">
                <div class="auth-message"></div>
                <button type="button" class="auth-close" data-bs-dismiss="modal">
                    <i class="uil uil-multiply"></i>
                </button>
                <div class="row m-0">
                    <!-- Login Fields -->
                    <div id="loginFields" class="col-md-6 auth-form-side">
                        <form id="loginForm" class="auth-form p-4">
                            
                            <h4 class="auth-title">Login</h4>
                            <div class="auth-group">
                                <input type="email" class="auth-control" name="email" placeholder="Email">
                            </div>
                            <div class="auth-group">
                                <input type="password" class="auth-control" name="password" placeholder="Password">
                                <i class="uil uil-eye password-toggle" onclick="togglePassword(this)"></i>
                            </div>
                            <div class="forgot-link mb-3">
                                <a href="#" id="forgotPassword">Forgot Password?</a>
                            </div>
                            <button class="auth-btn hover-btn" type="submit">Login</button>
                            <div class="auth-switch mt-3">
                                <p>Don't have an account? <a href="#" data-bs-toggle="modal" data-bs-target="#signupModal">Sign Up</a></p>
                            </div>
                        </form>
                    </div>
 
                    <!-- OTP Fields -->
                    <div id="loginOtpFields" class="col-md-6 auth-form-side" style="display: none;">
                        <div class="auth-form p-4 text-center">
                            <h4 class="auth-title">Verify OTP</h4>
                            <p class="text-muted mb-4">Enter the OTP sent to your email</p>
                            <div class="otp-inputs">
                                <input type="text" maxlength="1" class="otp-input">
                                <input type="text" maxlength="1" class="otp-input">
                                <input type="text" maxlength="1" class="otp-input">
                                <input type="text" maxlength="1" class="otp-input">
                                <input type="text" maxlength="1" class="otp-input">
                                <input type="text" maxlength="1" class="otp-input">
                            </div>
                            <button onclick="verifyLoginOTP()" class="auth-btn hover-btn mt-4">Verify OTP</button>
                            <div class="mt-3">
                                <span id="loginTimer">Resend OTP in <span id="loginCountdown">30</span>s</span>
                                <a href="#" id="loginResendBtn" style="display: none;">Resend OTP</a>
                            </div>
                        </div>
                    </div>
 
                    <!-- Branding Side -->
                    <div class="col-md-6 auth-brand-side">
                        <div class="auth-brand-content">
                            <img src="/images/logo.svg" alt="Fairway" class="mb-4">
                            <h2>Welcome Back!</h2>
                            <p>Login to access your account</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
 </div>
 




<script>
const VALIDATION_RULES = {
    email: {
        pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
        message: "Enter valid email address"
    },
    password: {
        pattern: /^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/,
        message: "Invalid password format"
    }
};

    document.addEventListener('DOMContentLoaded', function() {
    const signupForm = document.getElementById('loginForm');
    
    // Submit form
    loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        clearErrors();
 
        if (!validateLoginForm(this)) return;
 
        const formData = {
            email: this.querySelector('[name="email"]').value,
            password: this.querySelector('[name="password"]').value
        };
 
        try {
            const response = await fetch('/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            });
 
            const data = await response.json();
            if (data.success) {

                document.getElementById('loginFields').style.display = 'none';
                document.getElementById('loginOtpFields').style.display = 'block'; // Fixed ID
                startOTPTimer();
                document.querySelector('.otp-input').focus();
            }
            if (data.message) {
                document.querySelector('.auth-message').textContent = data.message;
                document.querySelector('.auth-message').classList.add('show');
                setTimeout(() => {
                    document.querySelector('.auth-message').classList.remove('show');
                }, 3000);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });

 
    // OTP input handling
    document.querySelectorAll('.otp-input').forEach((input, index, inputs) => {
        input.addEventListener('input', function() {
            if (this.value.length === 1 && index < inputs.length - 1) {
                inputs[index + 1].focus(); 
            }
        });
 
        input.addEventListener('keydown', function(e) {
            if (e.key === 'Backspace' && !this.value && index > 0) {
                inputs[index - 1].focus();
            }
        });
    });
 
    // Resend OTP button
    document.getElementById('loginResendBtn').addEventListener('click', async function(e) {
        e.preventDefault();
        const email = document.querySelector('[name="email"]').value;
        
        try {
            const response = await fetch('/resend-otp', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    type: 'login',
                    email: email
                })
            });
 
            const data = await response.json();
            if (data.success) {
                this.style.display = 'none';
                document.getElementById('timer').style.display = 'block';
                startOTPTimer();
            }
            if (data.message) {
                // Flash message from backend
                document.querySelector('.auth-message').textContent = data.message;
                document.querySelector('.auth-message').classList.add('show');
                setTimeout(() => {
                    document.querySelector('.auth-message').classList.remove('show');
                }, 3000);
            }
        } catch (error) {
            console.error('Error:', error);
        }
    });
 });
 
 function validateLoginForm(form) {
    let isValid = true;
    
    for (const field in VALIDATION_RULES) {
        const input = form.querySelector(`[name="${field}"]`);
        if (!input) continue;
        
        if (!VALIDATION_RULES[field].pattern.test(input.value)) {
            showError(input, VALIDATION_RULES[field].message);
            isValid = false;
        }
    }
 
    const password = form.querySelector('[name="password"]');
 
    return isValid;
 }
 
 function showError(input, message) {
    const formGroup = input.closest('.auth-group');
    const error = document.createElement('div');
    error.className = 'error-message';
    error.textContent = message;
    formGroup.appendChild(error);
    formGroup.classList.add('error');
 }
 
 function clearErrors() {
    document.querySelectorAll('.error-message').forEach(el => el.remove());
    document.querySelectorAll('.auth-group.error').forEach(el => el.classList.remove('error'));
    // Clear errors on input 
document.querySelectorAll('.auth-control').forEach(input => {
    input.addEventListener('input', function() {
        const formGroup = this.closest('.auth-group');
        const error = formGroup.querySelector('.error-message');
        if (error) {
            error.remove();
            formGroup.classList.remove('error');
        }
    });
 });
 }
 
 
 function startOTPTimer() {
    let timeLeft = 30;
    const timer = document.getElementById('loginTimer');
    const countdown = document.getElementById('loginCountdown');
    const resendBtn = document.getElementById('loginResendBtn');

    timer.style.display = 'block';
    resendBtn.style.display = 'none';

    const interval = setInterval(() => {
        timeLeft--;
        countdown.textContent = timeLeft;
        
        if (timeLeft <= 0) {
            clearInterval(interval);
            timer.style.display = 'none';
            resendBtn.style.display = 'block';
        }
    }, 1000);
}
 
 function verifyLoginOTP() {
    const otp = Array.from(document.querySelectorAll('.otp-input'))
        .map(input => input.value)
        .join('');
 
    fetch('/verify-login-otp', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ otp })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            window.location.href = data.redirectUrl;
        }if (data.message) {
            // Flash message from backend
            document.querySelector('.auth-message').textContent = data.message;
            document.querySelector('.auth-message').classList.add('show');
            setTimeout(() => {
                document.querySelector('.auth-message').classList.remove('show');
            }, 3000);
        }
    })
    .catch(error => console.error('Error:', error));
 }
</script>