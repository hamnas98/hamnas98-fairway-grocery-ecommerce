<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<meta name="description-gambolthemes" content="">
		<meta name="author-gambolthemes" content="">
		<title>Fairway Supermarket Admin</title>
		<link href="css/styles.css" rel="stylesheet">
		<link href="css/admin-style.css" rel="stylesheet">
		<link href="css/admin-custom" rel="stylesheet">
		<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
		<link  href="/admin/css/inventory.css"  rel="stylesheet">
		<style>
			
			</style>
		
		<!-- Vendor Stylesheets -->
		<link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
		<link href="vendor/fontawesome-free/css/all.min.css" rel="stylesheet">
		
	</head>

    <body class="sb-nav-fixed">
		<%- include('../partials/admin/topnav') %>
        <div id="layoutSidenav">
			<%- include('../partials/admin/sidebar') %>
            <div id="layoutSidenav_content">
                <main>
					<div class="container-fluid">
						<h2 class="mt-30 page-title">Orders</h2>
						<ol class="breadcrumb mb-30">
							<li class="breadcrumb-item"><a href="/admin/dashboard">Dashboard</a></li>
							<li class="breadcrumb-item active">Inventory</li>
						</ol>
					
						<div class="container-fluid">
                            <!-- Header -->
                            <div class="inventory-header">
                                <div class="header-content">
                                    <div class="header-left">
                                        <h2><i class="fas fa-boxes"></i> Inventory Management</h2>
                                        <div class="stats-cards">
                                            <div class="stat-card">
                                                <div class="stat-icon low">
                                                    <i class="fas fa-exclamation-triangle"></i>
                                                </div>
                                                <div class="stat-info">
                                                    <h4><%= lowStockCount %></h4>
                                                    <span>Low Stock Items</span>
                                                </div>
                                            </div>
                                            <div class="stat-card">
                                                <div class="stat-icon total">
                                                    <i class="fas fa-cube"></i>
                                                </div>
                                                <div class="stat-info">
                                                    <h4><%= totalProducts %></h4>
                                                    <span>Total Products</span>
                                                </div>
                                            </div>
                                            <div class="stat-card">
                                                <div class="stat-icon out">
                                                    <i class="fas fa-times-circle"></i>
                                                </div>
                                                <div class="stat-info">
                                                    <h4><%= outOfStockCount %></h4>
                                                    <span>Out of Stock</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="header-actions">
                                        <button class="btn custom-btn" onclick="updateBulkStock()">
                                            <i class="fas fa-sync-alt"></i> Bulk Update
                                        </button>
                                        <button class="btn custom-btn" onclick="downloadInventoryReport()">
                                            <i class="fas fa-download"></i> Export Report
                                        </button>
                                    </div>
                                </div>
                            </div>
                        
                            <!-- Main Content -->
                            <div class="inventory-content">
                                <!-- Filters -->
                                <div class="filters-section">
                                    <div class="search-box">
                                        <i class="fas fa-search"></i>
                                        <input type="text" id="searchInventory" placeholder="Search products...">
                                    </div>
                                    <div class="filter-group">
                                        <select id="categoryFilter">
                                            <option value="">All Categories</option>
                                            <% categories.forEach(category => { %>
                                                <option value="<%= category.name %>"><%= category.name %></option>
                                            <% }); %>
                                        </select>
                                        <select id="stockFilter">
                                            <option value="">All Stock Status</option>
                                            <option value="in">In Stock</option>
                                            <option value="low">Low Stock</option>
                                            <option value="out">Out of Stock</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <!-- Count Display -->
                                <div class="count-display">
                                    <span class="visible-count">Showing <%= products.length %> items</span>
                                </div>
                        
                                <!-- Inventory Table -->
                                <div class="inventory-table-container">
                                    <table class="inventory-table">
                                        <thead>
                                            <tr>
                                                <th>
                                                    <input type="checkbox" id="selectAll">
                                                </th>
                                                <th>Product</th>
                                                <th>Category</th>
                                                <th>SKU</th>
                                                <th>Stock</th>
                                                <th>Status</th>
                                                <th>Last Updated</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% products.forEach(product => { %>
                                                <tr>
                                                    <td>
                                                        <input type="checkbox" class="product-select" value="<%= product._id %>">
                                                    </td>
                                                    <td>
                                                        <div class="product-cell">
                                                            <img src="<%= product.images[0] %>" alt="<%= product.name %>">
                                                            <div class="product-info">
                                                                <h6><%= product.name %></h6>
                                                                <span><%= product.quantity + product.unit %></span>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td><%= product.category.name %></td>
                                                    <td><%= product.sku || '-' %></td>
                                                    <td>
                                                        <div class="stock-cell">
                                                            <span class="stock-value <%= getStockClass(product.stock) %>">
                                                                <%= product.stock %>
                                                            </span>
                                                            <button class="update-stock-btn" onclick="openStockModal('<%= product._id %>')">
                                                                <i class="fas fa-pen"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="status-badge <%= getStockStatusClass(product.stock) %>">
                                                            <%= getStockStatus(product.stock) %>
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <%= new Date(product.updatedAt).toLocaleDateString() %>
                                                    </td>
                                                    <td>
                                                        <div class="action-buttons">
                                                            <button class="btn-icon view" onclick="viewStockHistory('<%= product._id %>')" 
                                                                    title="View History">
                                                                <i class="fas fa-history"></i>
                                                            </button>
                                                            <button class="btn-icon alert" onclick="setStockAlert('<%= product._id %>')"
                                                                    title="Set Alert">
                                                                <i class="fas fa-bell"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            <% }); %>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <!-- Stock Update Modal -->
<div class="modal fade" id="stockUpdateModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Update Stock</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="update-form">
                    <input type="hidden" id="updateProductId">
                    <div class="form-group">
                        <label>Current Stock</label>
                        <input type="number" id="currentStock" class="form-control" disabled>
                    </div>
                    <div class="form-group">
                        <select id="updateType" class="form-select">
                            <option value="add">Add Stock</option>
                            <option value="subtract">Subtract Stock</option>
                            <option value="set">Set Stock</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Quantity</label>
                        <input type="number" id="updateQuantity" class="form-control" min="1">
                    </div>
                    <div class="form-group">
                        <label>Notes</label>
                        <textarea id="updateNotes" class="form-control" rows="2"></textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="updateStock()">Update</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="stockHistoryModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="fas fa-history"></i> Stock History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body p-0">
                <div class="stock-history-table">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Action</th>
                                <th>Quantity</th>
                                <th>Previous</th>
                                <th>New Stock</th>
                                <th>Notes</th>
                                <th>Updated By</th>
                            </tr>
                        </thead>
                        <tbody id="historyTableBody">
                            <!-- Data will be loaded dynamically -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

          </main>
            </div>
        </div>
        <script src="js/jquery.min.js"></script>
        <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
        <script src="js/scripts.js"></script>   
        <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeFilters();
        });
        
        function initializeFilters() {
            const searchInput = document.getElementById('searchInventory');
            const categoryFilter = document.getElementById('categoryFilter');
            const stockFilter = document.getElementById('stockFilter');
        
            // Add event listeners
            searchInput.addEventListener('input', applyFilters);
            categoryFilter.addEventListener('change', applyFilters);
            stockFilter.addEventListener('change', applyFilters);
        }
        
        function applyFilters() {
            const searchTerm = document.getElementById('searchInventory').value.toLowerCase();
            const categoryValue = document.getElementById('categoryFilter').value;
            const stockValue = document.getElementById('stockFilter').value;
        
            // Get all product rows
            const rows = document.querySelectorAll('.inventory-table tbody tr');
        
            rows.forEach(row => {
                let showRow = true;
        
                // Search filter
                const productName = row.querySelector('.product-info h6').textContent.toLowerCase();
                if (searchTerm && !productName.includes(searchTerm)) {
                    showRow = false;
                }
        
                // Category filter
                if (categoryValue) {
                    const category = row.cells[2].textContent; // Adjust index based on your table structure
                    if (category !== categoryValue) {
                        showRow = false;
                    }
                }
        
                // Stock filter
                if (stockValue) {
                    const stockStatus = row.querySelector('.status-badge').textContent.trim();
                    const matchesStock = matchesStockFilter(stockStatus, stockValue);
                    if (!matchesStock) {
                        showRow = false;
                    }
                }
        
                // Show/hide row
                row.style.display = showRow ? '' : 'none';
            });
        
            // Update visible items count
            updateVisibleCount();
        }
        
        function matchesStockFilter(status, filterValue) {
            switch(filterValue) {
                case 'low':
                    return status === 'Low Stock';
                case 'out':
                    return status === 'Out of Stock';
                case 'in':
                    return status === 'In Stock';
                default:
                    return true;
            }
        }
        
        function updateVisibleCount() {
            const visibleRows = document.querySelectorAll('.inventory-table tbody tr:not([style*="display: none"])');
            const countDisplay = document.querySelector('.visible-count');
            if (countDisplay) {
                countDisplay.textContent = `Showing ${visibleRows.length} items`;
            }
        }
        
        // Helper function to debounce search input
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }
        
        // Apply debouncing to search
        const searchInput = document.getElementById('searchInventory');
        if (searchInput) {
            searchInput.addEventListener('input', debounce(() => {
                applyFilters();
            }, 300));
        }


        async function openStockModal(productId) {
    try {
        const response = await fetch(`/admin/inventory/product/${productId}`);
        const data = await response.json();

        if (data.success) {
            document.getElementById('updateProductId').value = productId;
            document.getElementById('currentStock').value = data.product.stock;
            document.getElementById('updateQuantity').value = '';
            document.getElementById('updateNotes').value = '';
            
            const modal = new bootstrap.Modal(document.getElementById('stockUpdateModal'));
            modal.show();
        } else {
            throw new Error(data.message || 'Failed to load product details');
        }
    } catch (error) {
        showErrorToast(error.message || 'Failed to load product details');
    }
}



async function updateStock() {
    try {
        const productId = document.getElementById('updateProductId').value;
        const updateType = document.getElementById('updateType').value;
        const quantity = document.getElementById('updateQuantity').value;
        const notes = document.getElementById('updateNotes').value;

        // Validation
        if (!quantity || isNaN(quantity) || quantity < 0) {
            showErrorToast('Please enter a valid quantity');
            return;
        }

        // Show loading state
        const submitButton = document.querySelector('#stockUpdateModal .btn-primary');
        const originalText = submitButton.innerHTML;
        submitButton.disabled = true;
        submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

        const response = await fetch('/admin/inventory/update-stock', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                productId,
                updateType,
                quantity: parseInt(quantity),
                notes
            })
        });

        const data = await response.json();

        if (data.success) {
            // Hide modal
            const modalInstance = bootstrap.Modal.getInstance(document.getElementById('stockUpdateModal'));
            modalInstance.hide();

            // Show success message
            showSuccessToast('Stock updated successfully');

            // Update the stock display in the table
            const stockCell = document.querySelector(`tr[data-product-id="${productId}"] .stock-value`);
            if (stockCell) {
                stockCell.textContent = data.newStock;
                // Update stock status class
                stockCell.className = `stock-value ${getStockStatusClass(data.newStock)}`;
            }

            // Refresh page after a brief delay
            setTimeout(() => window.location.reload(), 1500);
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        showErrorToast(error.message || 'Failed to update stock');
    } finally {
        // Reset button state
        const submitButton = document.querySelector('#stockUpdateModal .btn-primary');
        submitButton.disabled = false;
        submitButton.innerHTML = 'Update Stock';
    }
}

// Stock History
async function viewStockHistory(productId) {
    try {
        const historyModal = new bootstrap.Modal(document.getElementById('stockHistoryModal'));
        const tableBody = document.getElementById('historyTableBody');
        
        // Show loading state
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </td>
            </tr>
        `;
        
        historyModal.show();

        const response = await fetch(`/admin/inventory/history/${productId}`);
        const data = await response.json();

        if (data.success) {
            tableBody.innerHTML = data.history.map(entry => `
                <tr>
                    <td>${new Date(entry.createdAt).toLocaleString()}</td>
                    <td>
                        <span class="history-badge ${entry.updateType}">
                            ${formatUpdateType(entry.updateType)}
                        </span>
                    </td>
                    <td>${entry.quantity}</td>
                    <td>${entry.previousStock}</td>
                    <td>${entry.newStock}</td>
                    <td class="notes-cell" title="${entry.notes || '-'}">${entry.notes || '-'}</td>
                    <td>${entry.updatedBy?.name || 'Admin'}</td>
                </tr>
            `).join('');

            if (data.history.length === 0) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="7" class="text-center py-4">
                            No history available
                        </td>
                    </tr>
                `;
            }
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        const tableBody = document.getElementById('historyTableBody');
        tableBody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center py-4 text-danger">
                    <i class="fas fa-exclamation-circle me-2"></i>
                    Failed to load history
                </td>
            </tr>
        `;
    }
}

function formatUpdateType(type) {
    switch(type) {
        case 'add':
            return 'Added';
        case 'subtract':
            return 'Removed';
        case 'set':
            return 'Set to';
        default:
            return type;
    }
}

// Bulk Update
function updateBulkStock() {
    const selectedProducts = $('.product-select:checked').map(function() {
        return {
            productId: this.value,
            quantity: $(`tr[data-product-id="${this.value}"] .stock-value`).text()
        };
    }).get();

    if (selectedProducts.length === 0) {
        showErrorToast('Please select products to update');
        return;
    }

    // Show bulk update form
    Swal.fire({
        title: 'Bulk Stock Update',
        html: createBulkUpdateForm(selectedProducts),
        confirmButtonText: 'Update Stock',
        showCancelButton: true,
        preConfirm: () => {
            return collectBulkUpdateData();
        }
    }).then((result) => {
        if (result.isConfirmed) {
            submitBulkUpdate(result.value);
        }
    });
}

// Export Report
function downloadInventoryReport() {
    window.location.href = '/admin/inventory/export';
}
// Function to create bulk update form HTML
function createBulkUpdateForm(products) {
    return `
        <div class="bulk-update-form">
            <div class="update-type mb-3">
                <label class="form-label">Update Type</label>
                <select id="bulkUpdateType" class="form-select">
                    <option value="add">Add Stock</option>
                    <option value="subtract">Subtract Stock</option>
                    <option value="set">Set Stock</option>
                </select>
            </div>
            <div class="selected-products">
                ${products.map((product, index) => `
                    <div class="product-update-row mb-3">
                        <div class="product-info">
                            <span class="current-stock">Current: ${product.quantity}</span>
                        </div>
                        <div class="quantity-input">
                            <input type="number" 
                                   id="quantity_${product.productId}" 
                                   class="form-control" 
                                   min="0" 
                                   placeholder="Enter quantity"
                                   data-product-id="${product.productId}">
                        </div>
                    </div>
                `).join('')}
            </div>
            <div class="notes-input mt-3">
                <label class="form-label">Notes (Optional)</label>
                <textarea id="bulkUpdateNotes" class="form-control" rows="2"></textarea>
            </div>
        </div>
    `;
}

// Function to collect bulk update data
function collectBulkUpdateData() {
    const updates = [];
    const updateType = document.getElementById('bulkUpdateType').value;
    const notes = document.getElementById('bulkUpdateNotes').value;
    let hasError = false;

    // Collect all product updates
    document.querySelectorAll('.product-update-row input').forEach(input => {
        const quantity = input.value;
        if (!quantity || isNaN(quantity) || quantity < 0) {
            hasError = true;
            return;
        }
        updates.push({
            productId: input.dataset.productId,
            quantity: parseInt(quantity)
        });
    });

    if (hasError) {
        Swal.showValidationMessage('Please enter valid quantities for all products');
        return false;
    }

    return {
        updateType,
        updates,
        notes
    };
}

// Function to submit bulk update
async function submitBulkUpdate(data) {
    try {
        const response = await fetch('/admin/inventory/bulk-update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: 'Stock updated successfully',
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(result.message || 'Failed to update stock');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to update stock'
        });
    }
}

// Export inventory report with more options
function downloadInventoryReport() {
    Swal.fire({
        title: 'Export Inventory Report',
        html: `
            <div class="export-options">
                <div class="mb-3">
                    <label class="form-label">Export Format</label>
                    <select id="exportFormat" class="form-select">
                        <option value="excel">Excel (.xlsx)</option>
                        <option value="csv">CSV</option>
                    </select>
                </div>
                <div class="mb-3">
                    <label class="form-label">Include Fields</label>
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" id="includeHistory" checked>
                        <label class="form-check-label">Include Stock History</label>
                    </div>
                </div>
            </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Export',
        showLoaderOnConfirm: true,
        preConfirm: () => {
            const format = document.getElementById('exportFormat').value;
            const includeHistory = document.getElementById('includeHistory').checked;
            
            const queryParams = new URLSearchParams({
                format,
                includeHistory
            }).toString();

            window.location.href = `/admin/inventory/export?${queryParams}`;
            return false; // Prevent modal from closing immediately
        }
    });
}

// Add these styles for bulk update form
const styles = `
.bulk-update-form {
    max-height: 400px;
    overflow-y: auto;
    padding: 10px;
}

.product-update-row {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 10px;
    border: 1px solid #eee;
    border-radius: 6px;
}

.product-info {
    flex: 1;
}

.quantity-input {
    width: 120px;
}

.current-stock {
    font-weight: 500;
    color: #666;
}

.export-options {
    padding: 10px;
}

.form-check {
    text-align: left;
    margin-top: 10px;
}
`;

// Add styles to document
const styleSheet = document.createElement("style");
styleSheet.textContent = styles;
document.head.appendChild(styleSheet);

// Toast notifications
function showSuccessToast(message) {
    Swal.fire({
        icon: 'success',
        title: message,
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true
    });
}

function showErrorToast(message) {
    Swal.fire({
        icon: 'error',
        title: message,
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true
    });
}

// Helper Functions
function getStockStatusText(status) {
    switch(status) {
        case 'low': return 'Low Stock';
        case 'out': return 'Out of Stock';
        case 'in': return 'In Stock';
        default: return '';
    }
}
</script>
    </body>
</html>
